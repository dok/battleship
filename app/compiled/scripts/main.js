// Generated by CoffeeScript 1.7.1
(function() {
  var App, AppView, Board, BoardView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var randomPositions;
      this.set('playerGuess', new Board('Enemy'));
      this.set('enemyGuess', new Board('Enemy Guess'));
      randomPositions = this.fillEnemyPosition();
      this.set('enemyPosition', new Board('Enemy Position', randomPositions));
      this.set('playerPosition', new Board('You'));
    };

    App.prototype.fillEnemyPosition = function() {
      var count, position, positions, x, y;
      count = 0;
      positions = {};
      while (count < 17) {
        x = Math.floor(Math.random() * 10);
        y = Math.floor(Math.random() * 10);
        position = {
          x: x,
          y: y
        };
        if (!positions[JSON.stringify(position)]) {
          positions[JSON.stringify(position)] = true;
          count++;
        }
      }
      return positions;
    };

    return App;

  })(Backbone.Model);

  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.className = 'gameContainer';

    AppView.prototype.initialize = function() {
      this.playerGuessView = new BoardView({
        model: this.model.get('playerGuess')
      });
      this.enemyGuessView = new BoardView({
        model: this.model.get('playerPosition')
      });
      this.model.get('playerGuess').on('addPosition', (function(_this) {
        return function() {
          var playerPositions;
          playerPositions = _this.model.get('playerGuess').get('matrix');
          return _this.model.get('enemyPosition').checkForMatch(playerPositions);
        };
      })(this));
      this.model.get('enemyPosition').on('hit', (function(_this) {
        return function() {
          var $item, column, row;
          row = _this.model.get('playerGuess').get('latest')[0] + 1;
          column = _this.model.get('playerGuess').get('latest')[1] + 1;
          $item = _this.playerGuessView.$el.find('table').find("tr:nth-child(" + row + ")").find("td:nth-child(" + column + ")");
          return $item.addClass('green');
        };
      })(this));
      this.model.get('playerPosition').on('addShip', (function(_this) {
        return function() {
          var count;
          count = _this.model.get('playerPosition').get('matrix').length;
          debugger;
        };
      })(this));
      return this.render();
    };

    AppView.prototype.render = function() {
      return this.$el.append(this['playerGuessView'].render()).append(this['enemyGuessView'].render()).html();
    };

    return AppView;

  })(Backbone.View);

  Board = (function(_super) {
    __extends(Board, _super);

    function Board() {
      return Board.__super__.constructor.apply(this, arguments);
    }

    Board.prototype.initialize = function(name, matrix) {
      this.set('boardName', name);
      this.set('matches', 0);
      this.set('latest', null);
      if (matrix) {
        return this.set('matrix', matrix);
      } else {
        return this.set('matrix', {});
      }
    };

    Board.prototype.attack = function(row, column) {
      var key;
      key = '{"x":' + column + ',"y":' + row + '}';
      if (!this.get('matrix')[key]) {
        this.get('matrix')[key] = true;
        this.set('latest', [row, column]);
      }
      return this.trigger('addPosition', this);
    };

    Board.prototype.addShip = function(row, column) {
      var key;
      key = '{"x":' + column + ',"y":' + row + '}';
      if (!this.get('matrix')[key]) {
        this.get('matrix')[key] = true;
        return this.trigger('addShip', this);
      }
    };

    Board.prototype.checkForMatch = function(matrix) {
      var matches;
      matches = _.intersection(Object.keys(this.get('matrix')), Object.keys(matrix));
      if (matches.length > this.get('matches')) {
        this.set('matches', matches.length);
        return this.trigger('hit', this);
      }
    };

    return Board;

  })(Backbone.Model);

  BoardView = (function(_super) {
    __extends(BoardView, _super);

    function BoardView() {
      return BoardView.__super__.constructor.apply(this, arguments);
    }

    BoardView.prototype.className = 'boardContainer';

    BoardView.prototype.template = _.template($('#boardTemplate').html());

    BoardView.prototype.initialize = function() {};

    BoardView.prototype.render = function() {
      return this.$el.html(this.template(this.model.toJSON()));
    };

    BoardView.prototype.events = {
      'click td': function(e) {
        var columnIndex, rowIndex;
        rowIndex = $(e.currentTarget).parent().index();
        columnIndex = $(e.currentTarget).index();
        if (this.model.get('boardName') === 'Enemy') {
          this.model.attack(rowIndex, columnIndex);
          return $(e.currentTarget).toggleClass('black');
        } else {
          this.model.addShip(rowIndex, columnIndex);
          return $(e.currentTarget).toggleClass('white');
        }
      }
    };

    return BoardView;

  })(Backbone.View);

  new AppView({
    model: new App()
  }).$el.appendTo('body');

}).call(this);
