// Generated by CoffeeScript 1.7.1
(function() {
  var App, AppView, BoardView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      this.set('playerGuess', {});
      this.set('enemyGuess', {});
      this.set('enemyPosition', this.fillEnemyPosition());
      console.log(this.get('enemyPosition'));
      this.set('playerPosition', {});
    };

    App.prototype.fillEnemyPosition = function() {
      var count, position, positions, x, y;
      count = 0;
      positions = {};
      while (count < 17) {
        x = Math.floor(Math.random() * 10);
        y = Math.floor(Math.random() * 10);
        position = {
          x: x,
          y: y
        };
        if (!positions[JSON.stringify(position)]) {
          positions[JSON.stringify(position)] = true;
          count++;
        }
      }
      return positions;
    };

    return App;

  })(Backbone.Model);

  BoardView = (function(_super) {
    __extends(BoardView, _super);

    function BoardView() {
      return BoardView.__super__.constructor.apply(this, arguments);
    }

    BoardView.prototype.template = _.template($('#boardTemplate').html());

    BoardView.prototype.initialize = function() {};

    BoardView.prototype.render = function() {
      return this.$el.html(this.template());
    };

    BoardView.prototype.events = {
      'click td': function(e) {
        var columnIndex, rowIndex;
        rowIndex = $(e.currentTarget).parent().index();
        columnIndex = $(e.currentTarget).index();
        return $(e.currentTarget).toggleClass('red');
      }
    };

    return BoardView;

  })(Backbone.View);

  AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.className = 'gameContainer';

    AppView.prototype.initialize = function() {
      this.playerGuessView = new BoardView({
        model: this.model.get('playerGuess')
      });
      this.enemyGuessView = new BoardView({
        model: this.model.get('enemyGuess')
      });
      return this.render();
    };

    AppView.prototype.render = function() {
      return this.$el.append(this['playerGuessView'].render()).append(this['enemyGuessView'].render()).html();
    };

    return AppView;

  })(Backbone.View);

  new AppView({
    model: new App()
  }).$el.appendTo('body');

}).call(this);
